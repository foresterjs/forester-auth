{"version":3,"sources":["../lib/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\n\nconst jwt = require('jsonwebtoken');\nconst assert = require('assert');\n\nmodule.exports = function (forester) {\n\n  var usersCollection = forester.registerCollection(require('./_users.json'));\n  var tokensCollection = forester.registerCollection(require('./_tokens.json'));\n  var config = forester.config;\n\n  forester.koa.use(check(usersCollection, tokensCollection, config));\n\n  forester.registerEndpoint(\n    {\n      action: \"login\",\n      collectionName: usersCollection.name,\n      method: \"post\",\n      route: \"/login\",\n      middlewares: [login(usersCollection, tokensCollection, config)],\n      description: \"login and create a session token\"\n    }\n  );\n\n};\n\n\nexport function check(usersCollection, tokensCollection, config) {\n\n  return async function (ctx, next) {\n\n    assert(config.jwt, \"jwt config not defined\");\n    assert(config.jwt.secret, \"jwt secret not defined\");\n\n    var {request, response} = ctx;\n\n    var token = request.query.token || request.get('Authorization');\n    if (!token) {\n      await next();\n      return;\n    }\n\n    /********************\n     check token with jwt\n     *********************/\n    try {\n      var vars = jwt.verify(token, config.jwt.secret);\n    } catch (e) {\n      response.status = 403;\n      return;\n    }\n\n    /**************************\n     check token with storage\n     **************************/\n    var tokenObj = await tokensCollection.findAll({where: {token}});\n    if (tokenObj.length !== 1) {\n      response.status = 403;\n      return;\n    }\n    tokenObj = tokenObj[0];\n\n    /*********\n     pick user\n     *********/\n    response.body = response.body || {};\n    var user = await usersCollection.pick(tokenObj.userId);\n    delete user.password;\n\n    /***********\n     authenticate\n     ************/\n    ctx.user = user; //If authenticated put user in ctx\n\n    await next();\n\n  }\n}\n\n\nexport function login(usersCollection, tokensCollection, config) {\n  return async function ({request, response}, next) {\n\n    assert(config.jwt, \"jwt config not defined\");\n    assert(config.jwt.secret, \"jwt secret not defined\");\n\n    var {username, password} = request.body;\n    response.body = response.body || {};\n\n\n    /*********\n     pick user\n     *********/\n\n    var users = await usersCollection.findAll({where: {username: username}});\n\n    if (users.length !== 1) {\n      response.body.done = false;\n      response.body.errors = ['not_found'];\n      await next();\n      return;\n    }\n    var user = users[0];\n\n    /***************\n     check password\n     **************/\n    if (user.password !== password) {\n      response.body.done = false;\n      response.body.errors = ['bad_password'];\n      await next();\n      return;\n    }\n    delete user.password;\n\n    /*********************\n     sign and create token\n     *********************/\n    var data = {\n      token: jwt.sign({}, config.jwt.secret),\n      userId: user.id\n    };\n\n    var token = await tokensCollection.create(data);\n\n    response.body.data = token;\n    response.body.user = user;\n    response.body.done = true;\n\n    await next();\n  }\n}\n"]}